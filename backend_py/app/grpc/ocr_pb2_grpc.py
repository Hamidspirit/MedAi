# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import ocr_pb2 as ocr__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ocr_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OCRServiceStub(object):
    """The OCR service handles text extraction (and later AI processing).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExtractText = channel.unary_unary(
            '/ocr.OCRService/ExtractText',
            request_serializer=ocr__pb2.OCRRequest.SerializeToString,
            response_deserializer=ocr__pb2.OCRResponse.FromString,
            _registered_method=True)
        self.AnalyzeText = channel.unary_unary(
            '/ocr.OCRService/AnalyzeText',
            request_serializer=ocr__pb2.AnalyzeRequest.SerializeToString,
            response_deserializer=ocr__pb2.AnalyzeResponse.FromString,
            _registered_method=True)


class OCRServiceServicer(object):
    """The OCR service handles text extraction (and later AI processing).
    """

    def ExtractText(self, request, context):
        """Extracts raw text from an uploaded file (image or PDF).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeText(self, request, context):
        """(Optional for later) After extracting, send text to an LLM for further processing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OCRServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ExtractText': grpc.unary_unary_rpc_method_handler(
            servicer.ExtractText,
            request_deserializer=ocr__pb2.OCRRequest.FromString,
            response_serializer=ocr__pb2.OCRResponse.SerializeToString,
        ),
        'AnalyzeText': grpc.unary_unary_rpc_method_handler(
            servicer.AnalyzeText,
            request_deserializer=ocr__pb2.AnalyzeRequest.FromString,
            response_serializer=ocr__pb2.AnalyzeResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'ocr.OCRService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        'ocr.OCRService', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.


class OCRService(object):
    """The OCR service handles text extraction (and later AI processing).
    """

    @staticmethod
    def ExtractText(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.OCRService/ExtractText',
            ocr__pb2.OCRRequest.SerializeToString,
            ocr__pb2.OCRResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeText(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.OCRService/AnalyzeText',
            ocr__pb2.AnalyzeRequest.SerializeToString,
            ocr__pb2.AnalyzeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
